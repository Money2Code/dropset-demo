

import requests
import re

import os
import openai
import google.generativeai as genai
from django.shortcuts import render
import requests
import base64
from PIL import Image
import io

API_URL = "https://api-inference.huggingface.co/models/ZB-Tech/Text-to-Image"
headers = {"Authorization": ""}



def generate_diet_workout_plan(weight, height, age, gender, meal, activity_level, goal):
    # Set up Gemini API URL and API Key
    api_key = ""
    api_url = f'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={api_key}'

    # Define the text content to send to the API
    text_content = f"""
    Generate a personalized weekly {goal} workout and diet plan for a {meal} choice {age}-year-old {gender} weighing {weight} kg and {height} cm tall with {activity_level} activity level.
    
    Include:
    - Specific workouts for each day of the week (Monday to Sunday).
    - Rest days (if any).
    - Type of exercises (e.g., cardio, strength, flexibility).
    - Sets, reps, and duration for each workout.
    - Diet suggestions for each day of the week.

    Provide detailed and easy-to-follow instructions for the user to follow throughout the week.
    """

    # Set headers
    headers = {
        "Content-Type": "application/json"
    }

    # Prepare the payload
    data = {
        "contents": [
            {
                "parts": [
                    {
                        "text": text_content
                    }
                ]
            }
        ]
    }

    try:
        # Make a POST request to Gemini API
        response = requests.post(api_url, headers=headers, json=data)

        # Print the full response for debugging
        print("Full Response:", response.json())  # Print the entire response for analysis

        # Check if the request was successful
        if response.status_code == 200:
            # Parse the response JSON
            result = response.json()
            ai_text = result['candidates'][0]['content']['parts'][0]['text']
            meal_descriptions = extract_meal_descriptions(ai_text)
            # Adjusting based on the actual structure of the response
            # return result['candidates'][0]['content']['parts'][0]['text']
            print("meal description",meal_descriptions)
            return ai_text , meal_descriptions
        else:
            return f"Error: {response.status_code} - {response.text}"

    except Exception as e:
        return f"An error occurred: {str(e)}"

def generate_updated_meal_plan(meal_type, custom_meal):

    api_key = ""
    api_url = f'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={api_key}'

    # Define the text content to send to the API
    text_content = f"""
    Generate a Customized list of   meal option for{meal_type} and  for a {custom_meal} 
    
    Include:.

    - tasty recipe for asked option 

    Provide detailed and easy-to-follow instructions for the user to follow throughout the week.
    """

    # Set headers
    headers = {
        "Content-Type": "application/json"
    }

    # Prepare the payload
    data = {
        "contents": [
            {
                "parts": [
                    {
                        "text": text_content
                    }
                ]
            }
        ]
    }

    try:
        # Make a POST request to Gemini API
        response = requests.post(api_url, headers=headers, json=data)

        # Print the full response for debugging
        print("Full Response:", response.json())  # Print the entire response for analysis

        # Check if the request was successful
        if response.status_code == 200:
            # Parse the response JSON
            result = response.json()
            ai_updated_text = result['candidates'][0]['content']['parts'][0]['text']
            print("ai_updated_text",ai_updated_text)
            return ai_updated_text
        
        else:
            return f"Error: {response.status_code} - {response.text}"

    except Exception as e:
        return f"An error occurred: {str(e)}"
    # Example of integrating AI/logic for updated meal planning
    return f"Updated plan for {meal_type}: {custom_meal}. (Generated by AI)"
def extract_meal_descriptions(ai_text):
    # Define regular expressions or keywords that identify meal items
    # Assumes meals might be separated by bullet points, line breaks, or meal names like "Breakfast"
    # Customize patterns as needed based on the actual response format.
          # meal_descriptions = extract_meal_descriptions(ai_updated_text)
    # Try to find common meal patterns
    meal_patterns = re.compile(
        r"(?:Breakfast|Lunch|Dinner|Snack|Meal \d+):?\s*(.*?)(?:\n|$)",  # Matches meals with labels
        re.IGNORECASE | re.DOTALL
    )
    
    # Find all matches for the meal pattern
    matches = meal_patterns.findall(ai_text)
    
    # Clean up meal descriptions (remove excess whitespace or symbols)
    meal_descriptions = [meal.strip() for meal in matches if meal.strip()]
    
    # If no structured format is detected, attempt to split based on bullet points or commas as a fallback
    if not meal_descriptions:
        meal_descriptions = [desc.strip() for desc in re.split(r"â€¢|\n|,", ai_text) if desc.strip()]
    
    return meal_descriptions

# Example usage with sample AI-generated text
  

import requests
import json
import re

def extract_nutritional_info(text):
    """
    Extract JSON block from Gemini response and convert to dictionary.
    """
    match = re.search(r'```json\s*(\{.*?\})\s*```', text, re.DOTALL)
    if match:
        json_str = match.group(1)
    else:
        match = re.search(r'(\{.*?\})', text, re.DOTALL)
        if match:
            json_str = match.group(1)
        else:
            raise ValueError("No JSON data found in the response.")
    
    return json.loads(json_str)


def calculate_diet_plan(weight, height, age, gender, activity_level, goal):
    # Set up Gemini API URL and API Key
    api_key = ""
    api_url = f'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={api_key}'

    # Construct the prompt with both JSON and meal plan instructions
    text_content = f"""
    Generate a personalized diet plan based on the following details:
    - Weight: {weight} kg
    - Height: {height} cm
    - Age: {age}
    - Gender: {gender}
    - Activity Level: {activity_level} (sedentary, light, moderate, active, extra)
    - Goal: {goal} (fat_loss, muscle_gain, maintenance)

    1. First, give the nutritional breakdown in **pure JSON format only** (without any explanation), like this:
    ```json
    {{
      "calories": "<daily calorie intake in kcal>",
      "protein": "<daily protein intake in grams>",
      "carbs": "<daily carbohydrate intake in grams>",
      "fats": "<daily fat intake in grams>",
      "fiber": "<daily fiber intake in grams>",
      "water": "<daily water intake in ml>"
    }}
    ```

    2. Then, provide a sample full-day meal plan broken into:
    - Breakfast
    - Mid-morning Snack
    - Lunch
    - Evening Snack
    - Dinner

    Each meal should mention the approximate calorie content and be aligned with the target macros.
    """

    headers = {
        "Content-Type": "application/json"
    }

    data = {
        "contents": [
            {
                "parts": [
                    {
                        "text": text_content
                    }
                ]
            }
        ]
    }

    try:
        # Make the POST request
        response = requests.post(api_url, headers=headers, json=data)

        # Debug full response
        print("Full Response:", response.json())

        if response.status_code == 200:
            result = response.json()
            ai_diet_text = result['candidates'][0]['content']['parts'][0]['text']
            
            print("\n=== AI Diet Plan Response ===\n")
            print(ai_diet_text)

            # Extract the JSON part
            nutrition_info = extract_nutritional_info(ai_diet_text)

            print("\n=== Extracted Nutritional Info ===")
            print("Calories:", nutrition_info['calories'])
            print("Protein (g):", nutrition_info['protein'])
            print("Carbs (g):", nutrition_info['carbs'])
            print("Fats (g):", nutrition_info['fats'])
            print("Fiber (g):", nutrition_info['fiber'])
            print("Water (ml):", nutrition_info['water'])

            return (
            nutrition_info['calories'],
            nutrition_info['protein'],
            nutrition_info['carbs'],
            nutrition_info['fats'],
            nutrition_info['fiber'],
            nutrition_info['water'],
            ai_diet_text
        ) # You can split these later for PDF/UI

        else:
            return f"Error: {response.status_code} - {response.text}"

    except Exception as e:
        return f"An error occurred: {str(e)}"

